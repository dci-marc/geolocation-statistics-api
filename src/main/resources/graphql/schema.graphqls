type Query {
    getIpBlocksPerCountry: [CountryIpBlocksResponse!]!
    getAsByNumber(number: Int!): [AsnDataModel!]!
    getAsById(id: Int!): [AsnDataModel!]!
    getAsByName(name: String!): [AsnDataModel!]!
}

type CountryIpBlocksResponse {
    country: String!
    count: Int!
}

type ResponseAsnData {
    status: ResponseStatus!
    message: String!
    data: AsnDataModel
}

# Extended version of AsnDataModel with direct access to ipStart and ipEnd
type AsnDataModel {
    id: ID!
    asNumber: Int!
    asName: String!
    ipBlocks: [AsnIpBlockDataModel!]!
}

type AsnIpBlockDataModel {
    ipStart: String!
    ipEnd: String!
}

enum ResponseStatus {
    OK
    INTERNAL_SERVER_ERROR
}